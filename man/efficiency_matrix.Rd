% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/efficiency_matrix-class.R
\name{build_efficiency_matrix}
\alias{build_efficiency_matrix}
\alias{is.efficiency_matrix}
\alias{print.efficiency_matrix}
\title{Create an efficiency_matrix object to use in a trophic projection}
\usage{
build_efficiency_matrix(efficiency_mean, efficiency_sd = NULL, nsp = NULL,
  ...)

is.efficiency_matrix(x)

\method{print}{efficiency_matrix}(x, ...)
}
\arguments{
\item{efficiency_mean}{a scalar, vector, or matrix denoting average trophic efficiencies between species pairs}

\item{efficiency_sd}{a scalar, vector, or matrix denoting the standard deviation of trophic efficiencies}

\item{nsp}{a scalar denoting the number of species in the associated food_web object; only required if efficiency is a scalar}

\item{...}{further arguments passed to or from other methods}

\item{x}{an object to print or test as an efficiency object}
}
\value{
An object of class \code{efficiency}
}
\description{
An 'efficiency_matrix' object stores the efficiency of energy conversion between a given pair of species.
It has two components: average values and standard deviations and is a sub-component of a \link[trophic]{trophic_dynamics} object
}
\note{
Scalar value efficiencies are assumed to be constant (on average) for all species. Vector efficiencies
are are assumed to apply to prey (not predators) under an assumption that conversion efficiencies are a
property of the food not the feeder. Matrix efficiencies are treated identically to food_web interaction matrices
but note that efficiency_matrix objects are not checked for loops or cannibalism (so any values on the diagonal
or upper triangular of the matrix are ignored).
}
\examples{

library(trophic)

# Load a pre-compiled food_web object

# Scalar example
efficiency <- data(example_efficiency_scalar)

# Construct the efficiency object
test_efficiency_scalar <- build_efficiency_matrix(efficiency_mean = efficiency, efficiency_sd = 0.1)

# Vector example
efficiency_vector <- data(example_efficiency_vector)
test_efficiency_vector <- build_efficiency_matrix(efficiency_mean = efficiency_vector, efficiency_sd = 0.1)

# Matrix example 1: fixed standard deviation
efficiency_mean <- data(example_efficiency_matrix)
test_efficiency_matrix <- build_efficiency_matrix(efficiency_mean = efficiency_mean, efficiency_sd = 0.1)

# Matrix example 2: changing standard deviation
efficiency_mean <- data(example_efficiency_matrix)
efficiency_sd <- data(example_efficiency_sd)
test_efficiency_matrix <- build_efficiency_matrix(efficiency_mean = efficiency_mean, efficiency_sd = efficiency_sd)

# Test if object is of the type 'efficiency_matrix'
  
is.efficiency_matrix(x)

# Print information about the 'efficiency_matrix' object

print(x)
}
